generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(255)
  username  String   @unique @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  phone     String   @db.VarChar(20)
  createdAt DateTime @default(now())
  is_verified  Boolean @default(false)

  role_id            Int?
  dept_id            Int?
  role               Role?        @relation(fields: [role_id], references: [role_id])
  department         Department?  @relation("DepartmentUsers", fields: [dept_id], references: [department_id])
  departmentsCreated Department[] @relation("DepartmentCreatedBy")
  rolesCreated       Role[]       @relation("RoleCreatedBy")

  attandances Attandance[]
  leaves      leaves[]
  profile     Profile[]

  @@map("users")
}

model Role {
  role_id  Int    @id @default(autoincrement())
  rolename String @db.VarChar(255)
  roledesc String @db.VarChar(255)

  createdBy     Int?
  createdByUser user? @relation("RoleCreatedBy", fields: [createdBy], references: [id])

  users user[]

  @@map("roles")
}

model Department {
  department_id   Int       @id @default(autoincrement())
  departmentname  String    @db.VarChar(255)
  departmentdesc  String    @db.VarChar(255)
  departmenthead  String?   @db.VarChar(255)
  total_employees Int?
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
  status          Boolean   @default(true)

  createdBy     Int
  createdByUser user   @relation("DepartmentCreatedBy", fields: [createdBy], references: [id])
  users         user[] @relation("DepartmentUsers")

  @@map("departments")
}

model Attandance {
  attandance_id Int       @id @default(autoincrement())
  user_id       Int
  date          DateTime  @default(now())
  status        Boolean   @default(true)
  check_in      DateTime?
  check_out     DateTime?

  user user @relation(fields: [user_id], references: [id])
}

model leaves {
  leave_id   Int       @id @default(autoincrement())
  user_id    Int
  date       DateTime  @default(now())
  reason     String?
  start_date DateTime?
  end_date   DateTime?
  status     String?   @default("Pending")
  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  user user @relation(fields: [user_id], references: [id])
}

model Profile {
  profile_id  Int     @id @default(autoincrement())
  user_id     Int     @unique
  user        user    @relation(fields: [user_id], references: [id])
  profile_pic String? @db.VarChar(500)
  address     String?
  city        String?
  gender      String?

  @@map("profiles")
}
model Otp {
  otp_id      Int      @id @default(autoincrement())
  otp_email   String
  otp_code    String
  created_at  DateTime @default(now())
  deleted_at  DateTime?
  is_verified Boolean  @default(false)
  is_expired  Boolean  @default(false)
}